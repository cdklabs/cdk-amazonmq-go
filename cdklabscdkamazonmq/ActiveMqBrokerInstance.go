package cdklabscdkamazonmq

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/cdklabs/cdk-amazonmq-go/cdklabscdkamazonmq/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/constructs-go/constructs/v10"
)

// A representation of a single-instance broker comprised of one broker in one Availability Zone.
//
// see: https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/single-broker-deployment.html
// Experimental.
type ActiveMqBrokerInstance interface {
	ActiveMqBrokerDeploymentBase
	IActiveMqBroker
	// Experimental.
	Arn() *string
	// Experimental.
	Configuration() IActiveMqBrokerConfiguration
	// Manages connections for the cluster.
	// Experimental.
	Connections() awsec2.Connections
	// Gets the available endpoints of the Amazon MQ for ActiveMQ broker.
	// Experimental.
	Endpoints() *ActiveMqBrokerEndpoints
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// Experimental.
	Id() *string
	// Gets the IP address of the ENI of the Amazon MQ for ActiveMQ broker.
	// Experimental.
	IpAddress() *string
	// Experimental.
	Name() *string
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	ConfigureLogRetention()
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Experimental.
	Metric(metricName *string, options *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricAmqpMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricBurstBalance(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricConsumerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricCpuCreditBalance(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricCpuUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricCurrentConnectionsCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricDequeueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricDispatchCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricEnqueueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricEnqueueTime(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricEstablishedConnectionsCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricExpiredCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricHeapUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricInactiveDurableTopicSubscribersCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricInFlightCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricJobSchedulerStorePercentUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricJournalFilesForFastRecovery(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricJournalFilesForFullRecovery(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricMemoryUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricMqttMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricNetworkConnectorConnectionCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricNetworkIn(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricNetworkOut(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricOpenTransactionCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricOpenwireMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricProducerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricQueueSize(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricReceiveCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricStompMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricStorePercentUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricTempPercentUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricTotalConsumerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricTotalDequeueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricTotalEnqueueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricTotalMessageCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricTotalProducerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricVolumeReadOps(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricVolumeWriteOps(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Experimental.
	MetricWsMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for ActiveMqBrokerInstance
type jsiiProxy_ActiveMqBrokerInstance struct {
	jsiiProxy_ActiveMqBrokerDeploymentBase
	jsiiProxy_IActiveMqBroker
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Arn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"arn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Configuration() IActiveMqBrokerConfiguration {
	var returns IActiveMqBrokerConfiguration
	_jsii_.Get(
		j,
		"configuration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Connections() awsec2.Connections {
	var returns awsec2.Connections
	_jsii_.Get(
		j,
		"connections",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Endpoints() *ActiveMqBrokerEndpoints {
	var returns *ActiveMqBrokerEndpoints
	_jsii_.Get(
		j,
		"endpoints",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Id() *string {
	var returns *string
	_jsii_.Get(
		j,
		"id",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) IpAddress() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ipAddress",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ActiveMqBrokerInstance) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewActiveMqBrokerInstance(scope constructs.Construct, id *string, props *ActiveMqBrokerInstanceProps) ActiveMqBrokerInstance {
	_init_.Initialize()

	if err := validateNewActiveMqBrokerInstanceParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_ActiveMqBrokerInstance{}

	_jsii_.Create(
		"@cdklabs/cdk-amazonmq.ActiveMqBrokerInstance",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewActiveMqBrokerInstance_Override(a ActiveMqBrokerInstance, scope constructs.Construct, id *string, props *ActiveMqBrokerInstanceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@cdklabs/cdk-amazonmq.ActiveMqBrokerInstance",
		[]interface{}{scope, id, props},
		a,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func ActiveMqBrokerInstance_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateActiveMqBrokerInstance_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-amazonmq.ActiveMqBrokerInstance",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func ActiveMqBrokerInstance_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateActiveMqBrokerInstance_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-amazonmq.ActiveMqBrokerInstance",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func ActiveMqBrokerInstance_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateActiveMqBrokerInstance_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/cdk-amazonmq.ActiveMqBrokerInstance",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := a.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		a,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (a *jsiiProxy_ActiveMqBrokerInstance) ConfigureLogRetention() {
	_jsii_.InvokeVoid(
		a,
		"configureLogRetention",
		nil, // no parameters
	)
}

func (a *jsiiProxy_ActiveMqBrokerInstance) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := a.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) GetResourceNameAttribute(nameAttr *string) *string {
	if err := a.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		a,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) Metric(metricName *string, options *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricParameters(metricName, options); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metric",
		[]interface{}{metricName, options},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricAmqpMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricAmqpMaximumConnectionsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricAmqpMaximumConnections",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricBurstBalance(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricBurstBalanceParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricBurstBalance",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricConsumerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricConsumerCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricConsumerCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricCpuCreditBalance(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricCpuCreditBalanceParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricCpuCreditBalance",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricCpuUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricCpuUtilizationParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricCpuUtilization",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricCurrentConnectionsCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricCurrentConnectionsCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricCurrentConnectionsCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricDequeueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricDequeueCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricDequeueCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricDispatchCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricDispatchCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricDispatchCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricEnqueueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricEnqueueCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricEnqueueCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricEnqueueTime(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricEnqueueTimeParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricEnqueueTime",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricEstablishedConnectionsCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricEstablishedConnectionsCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricEstablishedConnectionsCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricExpiredCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricExpiredCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricExpiredCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricHeapUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricHeapUsageParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricHeapUsage",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricInactiveDurableTopicSubscribersCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricInactiveDurableTopicSubscribersCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricInactiveDurableTopicSubscribersCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricInFlightCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricInFlightCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricInFlightCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricJobSchedulerStorePercentUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricJobSchedulerStorePercentUsageParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricJobSchedulerStorePercentUsage",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricJournalFilesForFastRecovery(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricJournalFilesForFastRecoveryParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricJournalFilesForFastRecovery",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricJournalFilesForFullRecovery(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricJournalFilesForFullRecoveryParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricJournalFilesForFullRecovery",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricMemoryUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricMemoryUsageParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricMemoryUsage",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricMqttMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricMqttMaximumConnectionsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricMqttMaximumConnections",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricNetworkConnectorConnectionCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricNetworkConnectorConnectionCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricNetworkConnectorConnectionCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricNetworkIn(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricNetworkInParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricNetworkIn",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricNetworkOut(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricNetworkOutParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricNetworkOut",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricOpenTransactionCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricOpenTransactionCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricOpenTransactionCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricOpenwireMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricOpenwireMaximumConnectionsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricOpenwireMaximumConnections",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricProducerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricProducerCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricProducerCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricQueueSize(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricQueueSizeParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricQueueSize",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricReceiveCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricReceiveCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricReceiveCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricStompMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricStompMaximumConnectionsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricStompMaximumConnections",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricStorePercentUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricStorePercentUsageParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricStorePercentUsage",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricTempPercentUsage(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricTempPercentUsageParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricTempPercentUsage",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricTotalConsumerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricTotalConsumerCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricTotalConsumerCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricTotalDequeueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricTotalDequeueCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricTotalDequeueCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricTotalEnqueueCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricTotalEnqueueCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricTotalEnqueueCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricTotalMessageCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricTotalMessageCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricTotalMessageCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricTotalProducerCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricTotalProducerCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricTotalProducerCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricVolumeReadOps(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricVolumeReadOpsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricVolumeReadOps",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricVolumeWriteOps(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricVolumeWriteOpsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricVolumeWriteOps",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) MetricWsMaximumConnections(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := a.validateMetricWsMaximumConnectionsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		a,
		"metricWsMaximumConnections",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ActiveMqBrokerInstance) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

